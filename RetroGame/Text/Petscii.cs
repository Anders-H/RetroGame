using System;

namespace RetroGame.Text;

public enum Petscii
{
    At,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    LeftBracket,
    Pound,
    RightBracket,
    Up,
    Left,
    Space,
    Exclamation,
    Quote,
    Hash,
    Dollar,
    Percent,
    Amp,
    Apos,
    LeftParentheses,
    RightParentheses,
    Asterisk,
    Plus,
    Comma,
    Minus,
    FullStop,
    Slash,
    Num0,
    Num1,
    Num2,
    Num3,
    Num4,
    Num5,
    Num6,
    Num7,
    Num8,
    Num9,
    Colon,
    Semicolon,
    LessThan,
    EqualsTo,
    GreaterThan,
    Question,
    ShiftAt,
    ShiftA,
    ShiftB,
    ShiftC,
    ShiftD,
    ShiftE,
    ShiftF,
    ShiftG,
    ShiftH,
    ShiftI,
    ShiftJ,
    ShiftK,
    ShiftL,
    ShiftM,
    ShiftN,
    ShiftO,
    ShiftP,
    ShiftQ,
    ShiftR,
    ShiftS,
    ShiftT,
    ShiftU,
    ShiftV,
    ShiftW,
    ShiftX,
    ShiftY,
    ShiftZ,
    ShiftLeftBracket,
    ShiftPound,
    ShiftRightBracket,
    ShiftUp,
    ShiftLeft,
    ShiftSpace,
    ShiftExclamation,
    ShiftQuote,
    ShiftHash,
    ShiftDollar,
    ShiftPercent,
    ShiftAmp,
    ShiftApos,
    ShiftLeftParentheses,
    ShiftRightParentheses,
    ShiftAsterisk,
    ShiftPlus,
    ShiftComma,
    ShiftMinus,
    ShiftFullStop,
    ShiftSlash,
    ShiftNum0,
    ShiftNum1,
    ShiftNum2,
    ShiftNum3,
    ShiftNum4,
    ShiftNum5,
    ShiftNum6,
    ShiftNum7,
    ShiftNum8,
    ShiftNum9,
    ShiftColon,
    ShiftSemicolon,
    ShiftLessThan,
    ShiftEqualsTo,
    ShiftGreaterThan,
    ShiftQuestion
}

public enum CharacterSet
{
    Uppercase,
    UppercaseInverted,
    Lowercase,
    LowercaseInverted
}

internal static class PetsciiHelper
{
    internal static Petscii GetCharacter(char c) =>
        c switch
        {
            '@' => Petscii.At,
            'a' => Petscii.A,
            'b' => Petscii.B,
            'c' => Petscii.C,
            'd' => Petscii.D,
            'e' => Petscii.E,
            'f' => Petscii.F,
            'g' => Petscii.G,
            'h' => Petscii.H,
            'i' => Petscii.I,
            'j' => Petscii.J,
            'k' => Petscii.K,
            'l' => Petscii.L,
            'm' => Petscii.M,
            'n' => Petscii.N,
            'o' => Petscii.O,
            'p' => Petscii.P,
            'q' => Petscii.Q,
            'r' => Petscii.R,
            's' => Petscii.S,
            't' => Petscii.T,
            'u' => Petscii.U,
            'v' => Petscii.V,
            'w' => Petscii.W,
            'x' => Petscii.X,
            'y' => Petscii.Y,
            ':' => Petscii.Colon,
            ',' => Petscii.Comma,
            '-' => Petscii.Minus,
            '.' => Petscii.FullStop,
            '0' => Petscii.Num0,
            '1' => Petscii.Num1,
            '2' => Petscii.Num2,
            '3' => Petscii.Num3,
            '4' => Petscii.Num4,
            '5' => Petscii.Num5,
            '6' => Petscii.Num6,
            '7' => Petscii.Num7,
            '8' => Petscii.Num8,
            '9' => Petscii.Num9,
            ' ' => Petscii.Space,
            '!' => Petscii.Exclamation,
            '(' => Petscii.LeftParentheses,
            ')' => Petscii.RightParentheses,
            'A' => Petscii.ShiftA,
            'B' => Petscii.ShiftB,
            'C' => Petscii.ShiftC,
            'D' => Petscii.ShiftD,
            'E' => Petscii.ShiftE,
            'F' => Petscii.ShiftF,
            'G' => Petscii.ShiftG,
            'H' => Petscii.ShiftH,
            'I' => Petscii.ShiftI,
            'J' => Petscii.ShiftJ,
            'K' => Petscii.ShiftK,
            'L' => Petscii.ShiftL,
            'M' => Petscii.ShiftM,
            'N' => Petscii.ShiftN,
            'O' => Petscii.ShiftO,
            'P' => Petscii.ShiftP,
            'Q' => Petscii.ShiftQ,
            'R' => Petscii.ShiftR,
            'S' => Petscii.ShiftS,
            'T' => Petscii.ShiftT,
            'U' => Petscii.ShiftU,
            'V' => Petscii.ShiftV,
            'W' => Petscii.ShiftW,
            _ => throw new ArgumentOutOfRangeException(c.ToString())
        };
}